apply plugin: 'com.android.library'
apply plugin: 'jacoco-android'
apply plugin: 'kotlin-android'
apply plugin: 'maven'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

	defaultConfig {
		minSdkVersion 14
		targetSdkVersion 28
		versionCode 3
		versionName '3.0.3'

		testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
	}

	buildTypes {
		debug {
			testCoverageEnabled true
		}

		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	lintOptions {
		abortOnError false
	}

	sourceSets {
		androidTest.java.srcDirs = ['src/androidTest/kotlin']
		test.java.srcDirs += ['src/test/kotlin']
	}

	testOptions {
		unitTests.returnDefaultValues = true // this prevents "not mocked" error
	}
}

dependencies {
    implementation 'androidx.annotation:annotation:1.0.0'

	testImplementation 'com.google.truth:truth:0.39'
	testImplementation 'junit:junit:4.12'
	testImplementation 'org.jetbrains.kotlin:kotlin-stdlib:1.2.30'

	androidTestImplementation 'com.android.support.test:rules:1.0.1'
	androidTestImplementation 'com.android.support.test:runner:1.0.1'
	androidTestImplementation 'com.google.truth:truth:0.39'
	androidTestImplementation 'org.jetbrains.kotlin:kotlin-stdlib:1.2.30'
}

android.libraryVariants.all { variant ->
	def name = variant.buildType.name
	def task = project.tasks.create "jar${name.capitalize()}", Jar
	task.dependsOn variant.javaCompiler
	task.from variant.javaCompiler.destinationDir
	artifacts.add('archives', task)
}

task sourcesJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier = 'sources'
}

task javadoc(type: Javadoc) {
	options.charSet = 'UTF-8'
	failOnError false
	source = android.sourceSets.main.java.sourceFiles
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}
