import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'com.android.library'
apply plugin: 'jacoco-android'
apply plugin: 'kotlin-android'
apply plugin: 'maven'

android {
	compileSdkVersion 27
	buildToolsVersion '27.0.3'

	defaultConfig {
		minSdkVersion 14
		targetSdkVersion 27
		versionCode 3
		versionName '3.0.3'

		testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
	}

	buildTypes {
		debug {
			testCoverageEnabled true
		}

		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	lintOptions {
		abortOnError false
	}

	sourceSets {
		androidTest.java.srcDirs = ['src/androidTest/kotlin']
		test.java.srcDirs += ['src/test/kotlin']
	}

	testOptions {
		unitTests.returnDefaultValues = true // this prevents "not mocked" error
	}
}

dependencies {
	implementation 'com.android.support:support-annotations:27.0.2'

	testImplementation 'com.google.truth:truth:0.39'
	testImplementation 'junit:junit:4.12'
	testImplementation 'org.jetbrains.kotlin:kotlin-stdlib:1.2.30'

	androidTestImplementation 'com.android.support.test:rules:1.0.1'
	androidTestImplementation 'com.android.support.test:runner:1.0.1'
	androidTestImplementation 'com.google.truth:truth:0.39'
	androidTestImplementation 'org.jetbrains.kotlin:kotlin-stdlib:1.2.30'
}

android.libraryVariants.all { variant ->
	def name = variant.buildType.name
	def task = project.tasks.create "jar${name.capitalize()}", Jar
	task.dependsOn variant.javaCompiler
	task.from variant.javaCompiler.destinationDir
	artifacts.add('archives', task)
}

task sourcesJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier = 'sources'
}

task javadoc(type: Javadoc) {
	options.charSet = 'UTF-8'
	failOnError false
	source = android.sourceSets.main.java.sourceFiles
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

// From https://stackoverflow.com/a/36130467/1914223
tasks.withType(Test) {
	testLogging {
		// set options for log level LIFECYCLE
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		// set options for log level DEBUG and INFO
		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}
